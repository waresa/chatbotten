{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\waris\\\\Desktop\\\\projects\\\\gptboss\\\\client\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport '../App.css';\nimport '../normal.css';\nimport { useState } from 'react';\nimport SideMenu from '../components/SideMenu';\nimport ChatBox from '../components/ChatBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [input, setInput] = useState('');\n  const [chatLog, setChatLog] = useState([]);\n  const [ansatt, setAnsatt] = useState(\"\");\n  const [generator, setGenerator] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [file, setFile] = useState(null);\n  function clearChat() {\n    setChatLog([]);\n  }\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let chatLogNew = [...chatLog, {\n      user: \"me\",\n      message: `${input}`\n    }];\n    setInput('');\n    setChatLog(chatLogNew);\n    setIsLoading(true);\n    const messages = chatLogNew.map(message => message.message);\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('message', JSON.stringify({\n      message: messages,\n      ansatt: `${ansatt}`,\n      generator: `${generator}`\n    }));\n    if (file === null) {\n      const response = await fetch('http://localhost:3080/chat', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      setChatLog([...chatLogNew, {\n        user: 'gpt',\n        message: data.message\n      }]);\n      setIsLoading(false);\n    } else {\n      const response = await fetch('http://localhost:3080/file', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      setChatLog([...chatLogNew, {\n        user: 'gpt',\n        message: data.message\n      }]);\n      setIsLoading(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SideMenu, {\n      ansatt: ansatt,\n      setAnsatt: setAnsatt,\n      generator: generator,\n      setGenerator: setGenerator,\n      clearChat: clearChat,\n      file: file,\n      setFile: setFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(ChatBox, {\n      chatLog: chatLog,\n      isLoading: isLoading,\n      handleSubmit: handleSubmit,\n      input: input,\n      setInput: setInput,\n      ansatt: ansatt,\n      generator: generator,\n      file: file\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 6\n  }, this);\n}\n_s(Chat, \"mxZmjW6PNZK1ROamF4GfqpC4BUQ=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","SideMenu","ChatBox","Chat","input","setInput","chatLog","setChatLog","ansatt","setAnsatt","generator","setGenerator","isLoading","setIsLoading","file","setFile","clearChat","handleSubmit","e","preventDefault","chatLogNew","user","message","messages","map","formData","FormData","append","JSON","stringify","response","fetch","method","body","data","json"],"sources":["C:/Users/waris/Desktop/projects/gptboss/client/src/pages/Chat.jsx"],"sourcesContent":["\r\n import '../App.css';\r\n import '../normal.css';\r\n import { useState }  from 'react';\r\n import SideMenu from '../components/SideMenu';\r\n import ChatBox from '../components/ChatBox';\r\n\r\n\r\n function Chat() {\r\n\r\n   const [input, setInput] = useState('');\r\n   const [chatLog, setChatLog] = useState([]);\r\n   const [ansatt, setAnsatt] = useState(\"\");\r\n   const [generator, setGenerator] = useState(\"\");\r\n   const [isLoading, setIsLoading] = useState(false);\r\n   const [file, setFile] = useState(null);\r\n\r\n function clearChat() {\r\n   setChatLog([]);\r\n }\r\n\r\n async function handleSubmit(e) {\r\n     e.preventDefault();\r\n     let chatLogNew = [...chatLog, { user: \"me\", message: `${input}`}];\r\n     setInput('');\r\n     setChatLog(chatLogNew);\r\n     setIsLoading(true);\r\n\r\n     const messages = chatLogNew.map((message) => message.message);  \r\n     const formData = new FormData();\r\n     formData.append('file', file);\r\n     formData.append('message', JSON.stringify({ message: messages, ansatt: `${ansatt}`, generator: `${generator}`}));\r\n\r\n     if (file === null) {\r\n     const response = await fetch('http://localhost:3080/chat', {\r\n       method: 'POST',\r\n       body: formData\r\n       });\r\n       const data = await response.json();\r\n       setChatLog([...chatLogNew, { user: 'gpt', message: data.message }]);\r\n       setIsLoading(false);\r\n   } else {\r\n       const response = await fetch('http://localhost:3080/file', {\r\n       method: 'POST',\r\n       body: formData\r\n       });\r\n       const data = await response.json();\r\n       setChatLog([...chatLogNew, { user: 'gpt', message: data.message }]);\r\n       setIsLoading(false);\r\n   }\r\n }\r\n\r\n   return (\r\n    \r\n     <div className=\"App\">\r\n       <SideMenu ansatt={ansatt} setAnsatt={setAnsatt} generator={generator} setGenerator={setGenerator} clearChat={clearChat} file={file} setFile={setFile} />\r\n       <ChatBox chatLog={chatLog} isLoading={isLoading} handleSubmit={handleSubmit} input={input} setInput={setInput} ansatt={ansatt} generator={generator} file={file} />\r\n       </div>\r\n   );\r\n }\r\n\r\n export default Chat;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}